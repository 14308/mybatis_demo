package ${package.Controller};


import org.springframework.web.bind.annotation.*;
import com.example.demo.domain.*;
import com.example.demo.service.*;

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * @author ${author} on ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    private final ${table.serviceName} ${table.serviceName.toLowerCase()};

    ${table.controllerName}(${table.serviceName} ${table.serviceName.toLowerCase()}){
        this.${table.serviceName.toLowerCase()} = ${table.serviceName.toLowerCase()};
    }

    @PostMapping()
    public ResponseEntity<${entity}> create${entity}(@RequestBody ${entity} ${entity.toLowerCase()}){
        return ResponseEntity.ok();
    }

    @PostMapping("/batch")
    public ResponseEntity<List<${entity}>> create${entity}Batch(@RequestBody List<${entity}> ${entity.toLowerCase()}s){
        return ResponseEntity.ok();
    }

    @PutMapping()
    public ResponseEntity<${entity}> update(@RequestBody ${entity} ${entity.toLowerCase()}){
        return ResponseEntity.ok();
    }

    @PutMapping("/batch")
    public ResponseEntity<List<${entity}>> updateBatch(@RequestBody List<${entity}> ${entity.toLowerCase()}s){
        return ResponseEntity.ok();
    }

    @DeleteMapping("/{id}")
    public ResponseEntity delete (@PathVariable Long id){
        return ResponseEntity.ok();
    }

    @DeleteMapping("/batch")
    public ResponseEntity delete (@PathVariable Long id){
        return ResponseEntity.ok();
    }
    @PostMapping("/query")
    public ResponseEntity<List<${entity}>> get<${entity}>>ByCond(){
        return ResponseEntity.ok();
    }
}
